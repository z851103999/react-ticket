{"version":3,"sources":["../src/index.ts"],"names":["pathToRegexp","toRegexp","mocker","pathMatch","options","path","keys","re","pathname","params","m","exec","key","param","i","length","name","decodeURIComponent","repeat","split","delimiter","app","watchFile","conf","watchFiles","Array","isArray","some","file","Error","isWatchFilePath","every","val","getConfig","req","res","next","_proxy","defaultOptions","changeHost","pathRewrite","proxy","httpProxy","bodyParserConf","bodyParserJSON","bodyParserText","bodyParserRaw","bodyParserUrlencoded","watchOptions","header","watcher","chokidar","watch","map","PATH","dirname","require","resolve","on","event","cleanCache","forEach","console","log","color","green_b","black","green","replace","process","cwd","ex","error","red_b","red","all","proxyKey","Object","find","kname","RegExp","method","mockerKey","accessOptions","get","keyName","setHeader","toLocaleUpperCase","sendStatus","currentProxy","url","URL","parse","headers","host","proxyOptions","listeners","proxyListeners","rgxStr","rePath","currentPath","indexOf","push","query","originalUrl","join","proxyHTTP","createProxyServer","err","message","stack","web","assign","target","href","bodyParserMethd","bodyParser","json","contentType","raw","text","urlencoded","extended","result","sensitive","strict","end","modulePath","e","module","cache","parent","children","splice","reduce","mockerItem"],"mappings":"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","sourcesContent":["import URL from 'url';\nimport PATH from 'path';\nimport * as net from \"net\";\nimport * as http from \"http\";\nimport { Request, Response, NextFunction, Application } from 'express';\nimport bodyParser from 'body-parser';\nimport httpProxy from 'http-proxy';\nimport * as toRegexp from 'path-to-regexp';\nimport { TokensToRegexpOptions, ParseOptions, Key } from 'path-to-regexp';\nimport clearModule from 'clear-module';\nimport chokidar from 'chokidar';\nimport color from 'colors-cli/safe';\n\nexport type ProxyTargetUrl = string | Partial<URL.Url>;\nexport type MockerResultFunction = ((req: Request, res: Response, next?: NextFunction) => void);\nexport type MockerResult = string | number| Array<any> | Record<string, any> | MockerResultFunction;\n\n/**\n * Setting a proxy router.\n * @example\n * \n * ```json\n * {\n *   '/api/user': {\n *     id: 1,\n *     username: 'kenny',\n *     sex: 6\n *   },\n *   'DELETE /api/user/:id': (req, res) => {\n *     res.send({ status: 'ok', message: '删除成功！' });\n *   }\n * }\n * ```\n */\nexport type MockerProxyRoute = Record<string, MockerResult> & {\n  /**\n   * This is the option parameter setting for apiMocker\n   * Priority processing.\n   * apiMocker(app, path, option)\n   * {@link MockerOption}\n   */\n  _proxy?: MockerOption;\n}\n\n/**\n * Listening for proxy events.  \n * This options contains listeners for [node-http-proxy](https://github.com/http-party/node-http-proxy#listening-for-proxy-events).\n * {typeof httpProxy.on}\n * {@link httpProxy}\n */\nexport interface HttpProxyListeners extends Record<string, any> {\n  start?: (\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    target: ProxyTargetUrl\n  ) => void;\n  proxyReq?: (\n    proxyReq: http.ClientRequest,\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    options: httpProxy.ServerOptions\n  ) => void\n  proxyRes?: (\n    proxyRes: http.IncomingMessage,\n    req: http.IncomingMessage,\n    res: http.ServerResponse\n  ) => void\n  proxyReqWs?: (\n    proxyReq: http.ClientRequest,\n    req: http.IncomingMessage,\n    socket: net.Socket,\n    options: httpProxy.ServerOptions,\n    head: any\n  ) => void\n  econnreset?: (\n    err: Error,\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    target: ProxyTargetUrl\n  ) => void\n  end?: (\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    proxyRes: http.IncomingMessage\n  ) => void;\n  /**\n   * This event is emitted once the proxy websocket was closed.\n   */\n  close?: (\n    proxyRes: http.IncomingMessage,\n    proxySocket: net.Socket,\n    proxyHead: any\n  ) => void\n}\n\nexport interface MockerOption {\n  /**\n   * `Boolean` Setting req headers host.\n   */\n  changeHost?: boolean;\n  /**\n   * rewrite target's url path. \n   * Object-keys will be used as RegExp to match paths. [#62](https://github.com/jaywcjlove/mocker-api/issues/62)\n   * @default `{}`\n   */\n  pathRewrite?: Record<string, string>,\n  /**\n   * Proxy settings, Turn a path string such as `/user/:name` into a regular expression. [path-to-regexp](https://www.npmjs.com/package/path-to-regexp)\n   * @default `{}`\n   */\n  proxy?: Record<string, string>,\n  /**\n   * Set the [listen event](https://github.com/nodejitsu/node-http-proxy#listening-for-proxy-events) and [configuration](https://github.com/nodejitsu/node-http-proxy#options) of [http-proxy](https://github.com/nodejitsu/node-http-proxy)\n   * @default `{}`\n   */\n  httpProxy?: {\n    options?: httpProxy.ServerOptions;\n    listeners?: HttpProxyListeners\n  };\n  /**\n   * bodyParser settings. \n   * @example\n   * \n   * ```js\n   * bodyParser = {\"text/plain\": \"text\",\"text/html\": \"text\"}\n   * ```\n   * \n   * will parsed `Content-Type='text/plain' and Content-Type='text/html'` with `bodyParser.text`\n   * \n   * @default `{}`\n   */\n  bodyParserConf?: {\n    [key: string]: 'raw' | 'text' | 'urlencoded' | 'json';\n  };\n  /**\n   * [`bodyParserJSON`](https://github.com/expressjs/body-parser/tree/56a2b73c26b2238bc3050ad90af9ab9c62f4eb97#bodyparserjsonoptions) JSON body parser\n   * @default `{}`\n   */\n  bodyParserJSON?: bodyParser.OptionsJson;\n  /**\n   * [`bodyParserText`](https://github.com/expressjs/body-parser/tree/56a2b73c26b2238bc3050ad90af9ab9c62f4eb97#bodyparsertextoptions) Text body parser\n   * @default `{}`\n   */\n  bodyParserText?: bodyParser.OptionsText;\n  /**\n   * [`bodyParserRaw`](https://github.com/expressjs/body-parser/tree/56a2b73c26b2238bc3050ad90af9ab9c62f4eb97#bodyparserrawoptions) Raw body parser\n   * @default `{}`\n   */\n  bodyParserRaw?: bodyParser.Options;\n  /**\n   * [`bodyParserUrlencoded`](https://github.com/expressjs/body-parser/tree/56a2b73c26b2238bc3050ad90af9ab9c62f4eb97#bodyparserurlencodedoptions) URL-encoded form body parser\n   * @default `{}`\n   */\n  bodyParserUrlencoded?: bodyParser.OptionsUrlencoded;\n  /**\n   * Options object as defined [chokidar api options](https://github.com/paulmillr/chokidar#api)\n   * @default `{}`\n   */\n  watchOptions?: chokidar.WatchOptions;\n  /**\n   * Access Control Allow options.\n   * @default `{}`\n   * @example\n   * ```js\n   * {\n   *  header: {\n   *    'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT, DELETE',\n   *  }\n   * }\n   * ```\n   */\n  header?: Record<string,string | number | string[]>\n}\n\nconst pathToRegexp = toRegexp.pathToRegexp;\nlet mocker: MockerProxyRoute = {};\n\nfunction pathMatch(options: TokensToRegexpOptions & ParseOptions) {\n  options = options || {};\n  return function (path: string) {\n    var keys: (Key & TokensToRegexpOptions & ParseOptions & { repeat: boolean })[] = [];\n    var re = pathToRegexp(path, keys, options);\n    return function (pathname: string, params?: any) {\n      var m = re.exec(pathname);\n      if (!m) return false;\n      params = params || {};\n      var key, param;\n      for (var i = 0; i < keys.length; i++) {\n        key = keys[i];\n        param = m[i + 1];\n        if (!param) continue;\n        params[key.name] = decodeURIComponent(param);\n        if (key.repeat) params[key.name] = params[key.name].split(key.delimiter)\n      }\n      return params;\n    }\n  }\n}\n\nexport default function (app: Application, watchFile: string | string[] | MockerProxyRoute, conf: MockerOption = {}) {\n  const watchFiles = Array.isArray(watchFile) ? watchFile : typeof watchFile === 'string' ? [watchFile] : [];\n\n  if (watchFiles.some(file => !file)) {\n    throw new Error('Mocker file does not exist!.');\n  }\n\n  // Mybe watch file or pass parameters\n  // https://github.com/jaywcjlove/mocker-api/issues/116\n  const isWatchFilePath = (Array.isArray(watchFile) && watchFile.every(val => typeof val === 'string')) || typeof watchFile === 'string';\n  mocker = isWatchFilePath ? getConfig() : watchFile;\n\n  if (!mocker) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      next();\n    }\n  }\n  let options = {...conf, ...(mocker._proxy || {})}\n  const defaultOptions = {\n    changeHost: true,\n    pathRewrite: {},\n    proxy: {},\n    // proxy: proxyConf: {},\n    httpProxy: {},\n    // httpProxy: httpProxyConf: {},\n    bodyParserConf: {},\n    bodyParserJSON: {},\n    bodyParserText: {},\n    bodyParserRaw: {},\n    bodyParserUrlencoded: {},\n    watchOptions: {},\n    header: {}\n  }\n\n  options = { ...defaultOptions, ...options };\n  // changeHost = true,\n  // pathRewrite = {},\n  // proxy: proxyConf = {},\n  // httpProxy: httpProxyConf = {},\n  // bodyParserConf= {},\n  // bodyParserJSON = {},\n  // bodyParserText = {},\n  // bodyParserRaw = {},\n  // bodyParserUrlencoded = {},\n  // watchOptions = {},\n  // header = {}\n\n  if (isWatchFilePath) {\n    // 监听配置入口文件所在的目录，一般为认为在配置文件/mock 目录下的所有文件\n    // 加上require.resolve，保证 `./mock/`能够找到`./mock/index.js`，要不然就要监控到上一级目录了\n    const watcher = chokidar.watch(watchFiles.map(watchFile => PATH.dirname(require.resolve(watchFile))), options.watchOptions);\n  \n    watcher.on('all', (event, path) => {\n      if (event === 'change' || event === 'add') {\n        try {\n          // 当监听的可能是多个配置文件时，需要清理掉更新文件以及入口文件的缓存，重新获取\n          cleanCache(path);\n          watchFiles.forEach(file => cleanCache(file));\n          mocker = getConfig();\n          if (mocker._proxy) {\n            options = { ...options, ...mocker._proxy };\n          }\n          console.log(`${color.green_b.black(' Done: ')} Hot Mocker ${color.green(path.replace(process.cwd(), ''))} file replacement success!`);\n        } catch (ex) {\n          console.error(`${color.red_b.black(' Failed: ')} Hot Mocker ${color.red(path.replace(process.cwd(), ''))} file replacement failed!!`);\n        }\n      }\n    })\n  }\n  // 监听文件修改重新加载代码\n  // 配置热更新\n  app.all('/*', (req: Request, res: Response, next: NextFunction) => {\n    \n    /**\n     * Get Proxy key\n     */\n    const proxyKey = Object.keys(options.proxy).find((kname) => {\n      return !!pathToRegexp(kname.replace((new RegExp('^' + req.method + ' ')), '')).exec(req.path);\n    });\n    /**\n     * Get Mocker key\n     * => `GET /api/:owner/:repo/raw/:ref`\n     * => `GET /api/:owner/:repo/raw/:ref/(.*)`\n     */\n    const mockerKey: string = Object.keys(mocker).find((kname) => {\n      return !!pathToRegexp(kname.replace((new RegExp('^' + req.method + ' ')), '')).exec(req.path);\n    });\n    /**\n     * Access Control Allow options.\n     * https://github.com/jaywcjlove/mocker-api/issues/61\n     */\n    const accessOptions: MockerOption['header'] = {\n      'Access-Control-Allow-Origin': req.get('Origin') || '*',\n      'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT, DELETE',\n      'Access-Control-Allow-Headers': 'Content-Type, X-Requested-With',\n      'Access-Control-Allow-Credentials': 'true',\n      ...options.header,\n    }\n    Object.keys(accessOptions).forEach(keyName => {\n      res.setHeader(keyName, accessOptions[keyName]);\n    });\n    // fix issue 34 https://github.com/jaywcjlove/mocker-api/issues/34\n    // In some cross-origin http request, the browser will send the preflighted options request before sending the request methods written in the code.\n    if (!mockerKey && req.method.toLocaleUpperCase() === 'OPTIONS'\n      && Object.keys(mocker).find((kname) => !!pathToRegexp(kname.replace((new RegExp('^(PUT|POST|GET|DELETE) ')), '')).exec(req.path))\n    ) {\n      return res.sendStatus(200);\n    }\n\n    if (proxyKey && options.proxy[proxyKey]) {\n      const currentProxy = options.proxy[proxyKey];\n      const url = URL.parse(currentProxy);\n      if (options.changeHost) {\n        req.headers.host = url.host;\n      }\n      const { options: proxyOptions = {}, listeners: proxyListeners = {} as HttpProxyListeners }: MockerOption['httpProxy'] = options.httpProxy;\n      /**\n       * rewrite target's url path. Object-keys will be used as RegExp to match paths.\n       * https://github.com/jaywcjlove/mocker-api/issues/62\n       */\n      Object.keys(options.pathRewrite).forEach(rgxStr => {\n        const rePath = req.path.replace(new RegExp(rgxStr), options.pathRewrite[rgxStr]);\n        const currentPath = [rePath];\n        if (req.url.indexOf('?') > 0) {\n          currentPath.push(req.url.replace(/(.*)\\?/, ''));\n        }\n        req.query = URL.parse(req.url, true).query;\n        req.url = req.originalUrl = currentPath.join('?');\n      });\n\n      const proxyHTTP = httpProxy.createProxyServer({});\n      proxyHTTP.on('error', (err) => {\n        console.error(`${color.red_b.black(` Proxy Failed: ${err.name}`)} ${err.message || ''} ${err.stack || ''} !!`);\n      });\n      Object.keys(proxyListeners).forEach(event => {\n        proxyHTTP.on(event, proxyListeners[event]);\n      });\n\n      proxyHTTP.web(req, res, Object.assign({ target: url.href }, proxyOptions));\n\n    } else if (mocker[mockerKey]) {\n      let bodyParserMethd = bodyParser.json({ ...options.bodyParserJSON }); // 默认使用json解析\n      let contentType = req.get('Content-Type');\n      /**\n       * `application/x-www-form-urlencoded; charset=UTF-8` => `application/x-www-form-urlencoded`\n       * Issue: https://github.com/jaywcjlove/mocker-api/issues/50\n       */\n      contentType = contentType && contentType.replace(/;.*$/, '');\n      if(options.bodyParserConf && options.bodyParserConf[contentType]) {\n        // 如果存在options.bodyParserConf配置 {'text/plain': 'text','text/html': 'text'}\n        switch(options.bodyParserConf[contentType]){// 获取bodyParser的方法\n          case 'raw': bodyParserMethd = bodyParser.raw({...options.bodyParserRaw }); break;\n          case 'text': bodyParserMethd = bodyParser.text({...options.bodyParserText }); break;\n          case 'urlencoded': bodyParserMethd = bodyParser.urlencoded({extended: false, ...options.bodyParserUrlencoded }); break;\n          case 'json': bodyParserMethd = bodyParser.json({ ...options.bodyParserJSON });//使用json解析 break;\n        }\n      } else {\n        // 兼容原来的代码,默认解析\n        // Compatible with the original code, default parsing\n        switch(contentType){\n          case 'text/plain': bodyParserMethd = bodyParser.raw({...options.bodyParserRaw }); break;\n          case 'text/html': bodyParserMethd = bodyParser.text({...options.bodyParserText }); break;\n          case 'application/x-www-form-urlencoded': bodyParserMethd = bodyParser.urlencoded({extended: false, ...options.bodyParserUrlencoded }); break;\n        }\n      }\n\n      bodyParserMethd(req, res, function () {\n        const result = mocker[mockerKey];\n        if (typeof result === 'function') {\n          const rgxStr = ~mockerKey.indexOf(' ') ? ' ' : '';\n          req.params = pathMatch({ sensitive: false, strict: false, end: false })(mockerKey.split(new RegExp(rgxStr))[1])(URL.parse(req.url).pathname);\n          result(req, res, next);\n        } else {\n          res.json(result);\n        }\n      });\n    } else {\n      next();\n    }\n  });\n\n  // The old module's resources to be released.\n  function cleanCache(modulePath: string) {\n    // The entry file does not have a .js suffix,\n    // causing the module's resources not to be released.\n    // https://github.com/jaywcjlove/webpack-api-mocker/issues/30\n    try {\n      modulePath = require.resolve(modulePath);\n    } catch (e) {}\n    var module = require.cache[modulePath];\n    if (!module) return;\n    // remove reference in module.parent\n    if (module.parent) {\n      module.parent.children.splice(module.parent.children.indexOf(module), 1);\n    }\n    // https://github.com/jaywcjlove/mocker-api/issues/42\n    clearModule(modulePath);\n  }\n  // Merge multiple Mockers\n  function getConfig() {\n    return watchFiles.reduce((mocker, file) => {\n      const mockerItem = require(file);\n      return Object.assign(mocker, mockerItem.default ? mockerItem.default : mockerItem);\n    }, {})\n  }\n  return (req: Request, res: Response, next: NextFunction) => {\n    next();\n  }\n}\n"]}